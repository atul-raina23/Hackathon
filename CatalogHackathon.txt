import * as fs from 'fs';

// Converts a base-encoded string to a decimal number
function convertBaseStringToNumber(encodedStr: string, base: number): number {
    return parseInt(encodedStr, base);
}

// Calculates the constant term of the polynomial using Lagrange interpolation
function findPolynomialConstant(sharesList: [number, number][]): number {
    const totalShares = sharesList.length;
    let computedConstant = 0;

    for (let i = 0; i < totalShares; i++) {
        let lagrangeTerm = sharesList[i][1];
        for (let j = 0; j < totalShares; j++) {
            if (i !== j) {
                lagrangeTerm *= -sharesList[j][0] / (sharesList[i][0] - sharesList[j][0]);
            }
        }
        computedConstant += lagrangeTerm;
    }

    // Round to handle floating-point precision issues
    return Number(computedConstant.toFixed(10));
}

// Parses a JSON string to extract shares for secret computation
function parseSharesFromJSON(jsonData: string): [number, number][] {
    const parsedObject = JSON.parse(jsonData);
    const sharesArray: [number, number][] = [];

    for (const key in parsedObject) {
        if (key !== 'keys') {
            const xValue = parseInt(key, 10);
            const baseNumber = parseInt(parsedObject[key].base, 10);
            const yValue = convertBaseStringToNumber(parsedObject[key].value, baseNumber);
            sharesArray.push([xValue, yValue]);
        }
    }

    return sharesArray;
}

// Main function to process shares and compute the secret
function processSecretFromJSON(jsonData: string) {
    try {
        const shares = parseSharesFromJSON(jsonData);

        // Ensure there are sufficient shares for reconstruction
        if (shares.length < 2) {
            console.error('Error: Insufficient shares for secret reconstruction.');
            return;
        }

        // Calculate the secret
        const secretValue = findPolynomialConstant(shares);

        // Output the result
        console.log(`The constant term (c) of the polynomial is: ${secretValue}`);
    } catch (error) {
        console.error('Error processing the JSON content:', error);
    }
}

// JSON inputs for test cases
const testCase1 = `
{
    "keys": {
        "n": 4,
        "k": 3
    },
    "1": {
        "base": "10",
        "value": "4"
    },
    "2": {
        "base": "2",
        "value": "111"
    },
    "3": {
        "base": "10",
        "value": "12"
    },
    "6": {
        "base": "4",
        "value": "213"
    }
}
`;

const testCase2 = `
{
    "keys": {
        "n": 9,
        "k": 6
    },
    "1": {
        "base": "10",
        "value": "28735619723837"
    },
    "2": {
        "base": "16",
        "value": "1A228867F0CA"
    },
    "3": {
        "base": "12",
        "value": "32811A4AA0B7B"
    },
    "4": {
        "base": "11",
        "value": "917978721331A"
    },
    "5": {
        "base": "16",
        "value": "1A22886782E1"
    },
    "6": {
        "base": "10",
        "value": "28735619654702"
    },
    "7": {
        "base": "14",
        "value": "71AB5070CC4B"
    },
    "8": {
        "base": "9",
        "value": "122662581541670"
    },
    "9": {
        "base": "8",
        "value": "642121030037605"
    }
}
`;

// Run the main function with both test case JSON inputs
console.log("Final Output of Test Case 1:");
processSecretFromJSON(testCase1);

console.log("\nFinal Output of Test Case 2:");
processSecretFromJSON(testCase2);
